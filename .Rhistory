as_tibble() |>  # Convert to tibble
select(-state) |>  # Remove state FIPS code column
rename(state_name = NAME) |>  # Rename NAME column
pivot_longer(
cols = starts_with("POP_"),
names_to = "year",
values_to = "population"
) |>
mutate(
year = str_remove(year, "POP_"),  # Remove POP_ prefix
year = as.numeric(year),
population = as.numeric(population)
) |>
mutate(
state = case_when(
state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]
)
)
population <- resp_body_json(response) |>
do.call(rbind, args = _)
library(tidyverse)
library(janitor)
population <- population |>
row_to_names(row_number = 1) |>  # Make first row the header
as_tibble() |>  # Convert to tibble
select(-state) |>  # Remove state FIPS code column
rename(state_name = NAME) |>  # Rename NAME column
pivot_longer(
cols = starts_with("POP_"),
names_to = "year",
values_to = "population"
) |>
mutate(
year = str_remove(year, "POP_"),  # Remove POP_ prefix
year = as.numeric(year),
population = as.numeric(population)
) |>
mutate(
state = case_when(
state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]
)
)
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
response <- request |> req_perform()
resp_status(response)
resp_content_type(response)
population <- resp_body_json(response) |>
do.call(rbind, args = _)
library(tidyverse)
library(janitor)
population <- population |>
row_to_names(row_number = 1) |>
as_tibble() |>
select(-state) |>
rename(state_name = NAME) |>
pivot_longer(
cols = starts_with("POP_"),
names_to = "year",
values_to = "population"
) |>
mutate(
year = str_remove(year, "POP_"),
year = as.numeric(year),
population = as.numeric(population)
) |>
mutate(
state = case_when(
state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]
)
)
population |>
mutate(state_name = reorder(state_name, population, FUN = mean)) |>
ggplot(aes(x = population, y = state_name)) +
geom_col(fill = "steelblue") +
facet_wrap(~year) +
labs(
title = "State Populations by Year",
x = "Population",
y = "State"
) +
theme_minimal()
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
library(jsonlite)
library(tidyverse)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url) |>
unnest(states) |>
rename(state_name = states)
# Shorten the long region name
regions <- regions |>
mutate(region_name = if_else(
region_name == "New York and New Jersey, Puerto Rico, Virgin Islands",
"NY/NJ/PR/VI",
region_name
))
population <- population |>
mutate(state_name = as.character(state_name)) |>
left_join(regions, by = "state_name")
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble()
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases <- request(api) |>
req_url_query(`$limit` = 10000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
select(state, end_date, new_cases) |>
rename(date = end_date, cases = new_cases) |>
mutate(
date = as.Date(date),
cases = as.numeric(cases)
)
cases |>
filter(year(date) %in% c(2020, 2021)) |>
left_join(population |> filter(year == 2021) |> select(state, population, region_name),
by = "state") |>
mutate(cases_per_100k = (cases / population) * 100000) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line(alpha = 0.7) +
facet_wrap(~region_name) +
labs(
title = "COVID-19 Cases per 100,000 by State (2020-2021)",
x = "Date",
y = "Cases per 100,000",
color = "State"
) +
theme_minimal() +
theme(legend.position = "none")
library(lubridate)
library(knitr)
cases |>
filter(year(date) %in% c(2020, 2021)) |>
mutate(
year = year(date),
month = month(date, label = TRUE, abbr = FALSE)
) |>
group_by(year, month) |>
summarize(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month) |>
kable()
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
deaths <- request(deaths_url) |>
req_url_query(`$limit` = 10000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
select(state, start_date, covid_19_deaths) |>
rename(date = start_date, deaths = covid_19_deaths) |>
mutate(
date = as.Date(date),
deaths = as.numeric(deaths)
)
deaths |>
group_by(state) |>
summarize(total_deaths = sum(deaths, na.rm = TRUE)) |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
mutate(state = reorder(state, total_deaths)) |>
ggplot(aes(x = total_deaths, y = state)) +
geom_col(fill = "red") +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = "Total Deaths",
y = "State"
) +
theme_minimal()
population |>
mutate(state_name = reorder(state_name, population, FUN = mean)) |>
ggplot(aes(x = population, y = state_name)) +
geom_col(fill = "steelblue") +
facet_wrap(~year) +
labs(
title = "State Populations by Year",
x = "Population",
y = "State"
) +
theme_minimal()
library(tidyverse)
library(janitor)
population <- population |>
row_to_names(row_number = 1) |>
as_tibble() |>
select(-state) |>
rename(state_name = NAME) |>
pivot_longer(
cols = starts_with("POP_"),
names_to = "year",
values_to = "population"
) |>
mutate(
year = str_remove(year, "POP_"),
year = as.numeric(year),
population = as.numeric(population),
state_name = as.character(state_name)  # ADD THIS LINE
) |>
mutate(
state = case_when(
state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]
)
)
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
library(httr2)
url <- "https://api.census.gov/data/2021/pep/population"
request <- url |>
request() |>
req_url_query(
get = "POP_2020,POP_2021,NAME",
`for` = "state:*",
key = census_key
)
response <- request |> req_perform()
resp_status(response)
resp_content_type(response)
population <- resp_body_json(response) |>
do.call(rbind, args = _)
library(tidyverse)
library(janitor)
population <- population |>
row_to_names(row_number = 1) |>
as_tibble() |>
select(-state) |>
rename(state_name = NAME) |>
pivot_longer(
cols = starts_with("POP_"),
names_to = "year",
values_to = "population"
) |>
mutate(
year = str_remove(year, "POP_"),
year = as.numeric(year),
population = as.numeric(population),
state_name = as.character(state_name)  # ADD THIS LINE
) |>
mutate(
state = case_when(
state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]
)
)
population |>
mutate(state_name = reorder(state_name, population, FUN = mean)) |>
ggplot(aes(x = population, y = state_name)) +
geom_col(fill = "steelblue") +
facet_wrap(~year) +
labs(
title = "State Populations by Year",
x = "Population",
y = "State"
) +
theme_minimal()
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
library(jsonlite)
library(tidyverse)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url) |>
unnest(states) |>
rename(state_name = states)
# Shorten the long region name
regions <- regions |>
mutate(region_name = if_else(
region_name == "New York and New Jersey, Puerto Rico, Virgin Islands",
"NY/NJ/PR/VI",
region_name
))
population <- population |>
mutate(state_name = as.character(state_name)) |>
left_join(regions, by = "state_name")
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble()
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases <- request(api) |>
req_url_query(`$limit` = 10000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
select(state, end_date, new_cases) |>
rename(date = end_date, cases = new_cases) |>
mutate(
date = as.Date(date),
cases = as.numeric(cases)
)
cases |>
filter(year(date) %in% c(2020, 2021)) |>
left_join(population |> filter(year == 2021) |> select(state, population, region_name),
by = "state") |>
mutate(cases_per_100k = (cases / population) * 100000) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line(alpha = 0.7) +
facet_wrap(~region_name) +
labs(
title = "COVID-19 Cases per 100,000 by State (2020-2021)",
x = "Date",
y = "Cases per 100,000",
color = "State"
) +
theme_minimal() +
theme(legend.position = "none")
library(lubridate)
library(knitr)
cases |>
filter(year(date) %in% c(2020, 2021)) |>
mutate(
year = year(date),
month = month(date, label = TRUE, abbr = FALSE)
) |>
group_by(year, month) |>
summarize(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month) |>
kable()
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
deaths <- request(deaths_url) |>
req_url_query(`$limit` = 10000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
select(state, start_date, covid_19_deaths) |>
rename(date = start_date, deaths = covid_19_deaths) |>
mutate(
date = as.Date(date),
deaths = as.numeric(deaths)
)
deaths |>
group_by(state) |>
summarize(total_deaths = sum(deaths, na.rm = TRUE)) |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
mutate(state = reorder(state, total_deaths)) |>
ggplot(aes(x = total_deaths, y = state)) +
geom_col(fill = "red") +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = "Total Deaths",
y = "State"
) +
theme_minimal()
deaths |>
filter(state != "United States") |>
group_by(state) |>
summarize(total_deaths = sum(deaths, na.rm = TRUE)) |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
mutate(state = reorder(state, total_deaths)) |>
ggplot(aes(x = total_deaths, y = state)) +
geom_col(fill = "red") +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = "Total Deaths",
y = "State"
) +
theme_minimal()
source("census-key.R")
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
library(httr2)
url <- "https://api.census.gov/data/2021/pep/population"
request <- url |>
request() |>
req_url_query(
get = "POP_2020,POP_2021,NAME",
`for` = "state:*",
key = census_key
)
response <- request |> req_perform()
resp_status(response)
resp_content_type(response)
population <- resp_body_json(response) |>
do.call(rbind, args = _)
library(tidyverse)
library(janitor)
population <- population |>
row_to_names(row_number = 1) |>
as_tibble() |>
select(-state) |>
rename(state_name = NAME) |>
pivot_longer(
cols = starts_with("POP_"),
names_to = "year",
values_to = "population"
) |>
mutate(
year = str_remove(year, "POP_"),
year = as.numeric(year),
population = as.numeric(population),
state_name = as.character(state_name)  # ADD THIS LINE
) |>
mutate(
state = case_when(
state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]
)
)
population |>
mutate(state_name = reorder(state_name, population, FUN = mean)) |>
ggplot(aes(x = population, y = state_name)) +
geom_col(fill = "steelblue") +
facet_wrap(~year) +
labs(
title = "State Populations by Year",
x = "Population",
y = "State"
) +
theme_minimal()
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
library(jsonlite)
library(tidyverse)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url) |>
unnest(states) |>
rename(state_name = states)
# Shorten the long region name
regions <- regions |>
mutate(region_name = if_else(
region_name == "New York and New Jersey, Puerto Rico, Virgin Islands",
"NY/NJ/PR/VI",
region_name
))
population <- population |>
mutate(state_name = as.character(state_name)) |>
left_join(regions, by = "state_name")
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble()
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases <- request(api) |>
req_url_query(`$limit` = 10000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
select(state, end_date, new_cases) |>
rename(date = end_date, cases = new_cases) |>
mutate(
date = as.Date(date),
cases = as.numeric(cases)
)
cases |>
filter(year(date) %in% c(2020, 2021)) |>
left_join(population |> filter(year == 2021) |> select(state, population, region_name),
by = "state") |>
mutate(cases_per_100k = (cases / population) * 100000) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line(alpha = 0.7) +
facet_wrap(~region_name) +
labs(
title = "COVID-19 Cases per 100,000 by State (2020-2021)",
x = "Date",
y = "Cases per 100,000",
color = "State"
) +
theme_minimal() +
theme(legend.position = "none")
library(lubridate)
library(knitr)
cases |>
filter(year(date) %in% c(2020, 2021)) |>
mutate(
year = year(date),
month = month(date, label = TRUE, abbr = FALSE)
) |>
group_by(year, month) |>
summarize(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month) |>
kable()
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
deaths <- request(deaths_url) |>
req_url_query(`$limit` = 10000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
select(state, start_date, covid_19_deaths) |>
rename(date = start_date, deaths = covid_19_deaths) |>
mutate(
date = as.Date(date),
deaths = as.numeric(deaths)
)
deaths |>
filter(state != "United States") |>
group_by(state) |>
summarize(total_deaths = sum(deaths, na.rm = TRUE)) |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
mutate(state = reorder(state, total_deaths)) |>
ggplot(aes(x = total_deaths, y = state)) +
geom_col(fill = "red") +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = "Total Deaths",
y = "State"
) +
theme_minimal()
